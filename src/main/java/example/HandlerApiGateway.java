package example;

import com.amazonaws.services.lambda.AWSLambda;
import com.amazonaws.services.lambda.AWSLambdaAsyncClient;
import com.amazonaws.services.lambda.AWSLambdaClient;
import com.amazonaws.services.lambda.model.InvocationType;
import com.amazonaws.services.lambda.model.InvokeRequest;
import com.amazonaws.services.lambda.model.InvokeResult;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.LambdaLogger;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;

// Handler value: example.HandlerApiGateway
public class HandlerApiGateway implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent>{

    String region = System.getenv("AWS_LAMBDA_REGION") == null ? "Region_not_Set" : System.getenv("AWS_LAMBDA_REGION");
    String invokeTypeUsed = System.getenv("INVOKE_TYPE_USED") == null ? "INVOKE_TYPE_NOT_SET" : System.getenv("INVOKE_TYPE_USED");
    String lambdaToBeInvoked = System.getenv("LAMBDA_TO_BE_INVOKED") == null ? "dev-second-lambda" : System.getenv("LAMBDA_TO_BE_INVOKED") ;

    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    //AWSLambdaClient lambdaClient = AWSLambdaClient().builder().withRegion(DEFAULT_LAMBDA_REGION).build();
    //AWSLambda lambdaClient = AWSLambdaAsyncClient.builder().withRegion("ap-south-1").build();
    AWSLambda lambdaClient = AWSLambdaClient.builder().withRegion(region).build();



  @Override
  public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent event, Context context)
  {
    LambdaLogger logger = context.getLogger();
    Map<String, String> qsMap = event.getQueryStringParameters();
    System.out.println("**************** "+qsMap);

    String nameValue = event.getQueryStringParameters().get("name");
    System.out.println(nameValue);

    //lambdaClient = new AWSLambdaClient(new DefaultAWSCredentialsProviderChain()); //    region = Region.getRegion(Regions.fromName(regionName)); //    lambdaClient.setRegion(region);

    Map<String,String> map = new HashMap<String,String>();
    map.put("key1","value1");
    map.put("key12",nameValue);
    map.put("key123","value123");

    InvokeRequest request = new InvokeRequest();
    request.setFunctionName(lambdaToBeInvoked);
    request.setPayload(gson.toJson(map));
    if ("synchronous".equalsIgnoreCase(invokeTypeUsed)){
      request.setInvocationType(InvocationType.RequestResponse);
    }else{
      request.setInvocationType(InvocationType.Event);
    }

    InvokeResult invokeResult = lambdaClient.invoke(request);
    Integer statusCode = invokeResult.getStatusCode();

    System.out.println("*********************$$$$$$$*************************");
    System.out.println(invokeResult.getPayload().toString());
    System.out.println("----------------------");
    System.out.println(statusCode);
    System.out.println("----------------------");
    String returnValue = StandardCharsets.UTF_8.decode(invokeResult.getPayload()).toString();
    System.out.println(returnValue);
    System.out.println("----------------------");
    System.out.println("*********************$$$$$$$*************************");

    APIGatewayProxyResponseEvent response = new APIGatewayProxyResponseEvent();
    response.setIsBase64Encoded(false);
    response.setStatusCode(200);
    HashMap<String, String> headers = new HashMap<String, String>();
    headers.put("Content-Type", "text/html");
    response.setHeaders(headers);
    response.setBody("<!DOCTYPE html><html><head><title>AWS Lambda invoking another....Lambda</title></head><body>"+
      "<h1>Welcome Page generated by a Lambda function.</h1>" +
            "<h1>"+invokeTypeUsed+"</h1><p> call from the first to the second lambda</p>" +
            "<p>StatusCode : "+statusCode+"</p>" +
            "<p>"+returnValue+"</p>" +
      "</body></html>");
    // log execution details
    Util.logEnvironment(event, context, gson);
    return response;
  }
}